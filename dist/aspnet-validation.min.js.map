{"version":3,"sources":["webpack://aspnetValidation/webpack/universalModuleDefinition","webpack://aspnetValidation/webpack/bootstrap","webpack://aspnetValidation/./src/index.ts"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","r","value","n","__esModule","object","property","prototype","hasOwnProperty","p","s","MvcValidationProviders","this","required","element","params","Boolean","stringLength","min","parseInt","length","max","compare","other","otherElement","document","getElementById","substr","range","val","parseFloat","isNaN","regex","pattern","RegExp","test","email","creditcard","cDigit","nCheck","nDigit","bEven","replace","charAt","url","phone","remote","Promise","ok","reject","encodeURIComponent","xtras","additionalfields","split","xtra","e","request","XMLHttpRequest","open","onload","status","data","JSON","parse","responseText","statusText","onerror","send","ValidationService","providers","messageFor","elementUIDs","elementByUID","formInputs","validators","elementEvents","summary","debounce","addProvider","callback","addMvcProviders","mvc","scanMessages","validationMessageElements","querySelectorAll","name_1","getAttribute","push","parseDirectives","attributes","directives","validationAtributes","cut","a","indexOf","key","parameters","keys","filter","Q","directive","error","pcut","pvalue","pkey","guid4","Math","random","toString","getElementUID","node","x","uid","getFormValidationTask","formUID","formInputUIDs","formValidators","inputUID","tasks","map","all","then","result","every","trackFormInput","form","_this","cb","validate","preventDefault","success","submit","catch","console","log","addEventListener","_i","uids_1","input","classList","remove","spans","innerHTML","renderSummary","addInput","createValidator","delay","clearTimeout","setTimeout","tagName","toLowerCase","scanInputs","inputs","createSummaryDOM","ul","createElement","li","appendChild","summaryElements","shadow","stringify","sort","renderedSummaryJSON","className","cloneNode","addError","message","add","removeError","__awaiter","provider","valid","resolution","_c","sent","bootstrap","event"],"mappings":"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","file":"aspnet-validation.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"aspnetValidation\"] = factory();\n\telse\n\t\troot[\"aspnetValidation\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","/**\r\n * A simple IDictionary<string, string>\r\n */\r\nexport interface StringKeyValuePair {\r\n    [key: string]: string\r\n}\r\n\r\n/**\r\n * A duplex key-value pair for an element, by GUID or its DOM object reference.\r\n */\r\ninterface ElementUID {\r\n    node: Element,\r\n    uid: string;\r\n}\r\n\r\n/**\r\n * Parameters passed into validation providers from the element attributes.\r\n * error property is read from data-val-[Provider Name] attribute.\r\n * params property is populated from data-val-[Provider Name]-[Parameter Name] attributes.\r\n */\r\nexport interface ValidationDirectiveBindings {\r\n    error: string,\r\n    params: StringKeyValuePair\r\n}\r\n\r\n/**\r\n * A key-value pair describing what validations to enforce to an input element, with respective parameters.\r\n */\r\nexport type ValidationDirective = {\r\n    [key: string]: ValidationDirectiveBindings\r\n};\r\n\r\n/**\r\n * Validation plugin signature with multitype return.\r\n * Boolean return signifies the validation result, which uses the default validation error message read from the element attribute.\r\n * String return signifies failed validation, which then will be used as the validation error message.\r\n * Promise return signifies asynchronous plugin behavior, with same behavior as Boolean or String.\r\n */\r\nexport type ValidationProvider = (value: string, element: HTMLInputElement, params: StringKeyValuePair) => boolean | string | Promise<boolean | string>;\r\n\r\n/**\r\n * A callback method signature that kickstarts a new validation task for an input element, as a Boolean Promise.\r\n */\r\ntype Validator = () => Promise<boolean>;\r\n\r\n/**\r\n * Contains default implementations for ASP.NET Core MVC validation attributes.\r\n */\r\nexport class MvcValidationProviders {\r\n    /**\r\n     * Validates whether the input has a value.\r\n     */\r\n    required: ValidationProvider = (value, element, params) => {\r\n        return Boolean(value);\r\n    }\r\n\r\n    /**\r\n     * Validates whether the input value satisfies the length contstraint.\r\n     */\r\n    stringLength: ValidationProvider = (value, element, params) => {\r\n        if (!value) {\r\n            return true;\r\n        }\r\n\r\n        if (params.min) {\r\n            let min = parseInt(params.min);\r\n            if (value.length < min) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        if (params.max) {\r\n            let max = parseInt(params.max);\r\n            if (value.length > max) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Validates whether the input value is equal to another input value.\r\n     */\r\n    compare: ValidationProvider = (value, element, params) => {\r\n        if (!params.other) {\r\n            return true;\r\n        }\r\n\r\n        // Sample other parameter: \"*.Name\"\r\n        // Wat?\r\n        let otherElement = document.getElementById(params.other.substr(2)) as HTMLInputElement;\r\n        if (!otherElement) {\r\n            return true;\r\n        }\r\n\r\n        return (otherElement.value === value);\r\n    }\r\n\r\n    /**\r\n     * Validates whether the input value is a number within a given range.\r\n     */\r\n    range: ValidationProvider = (value, element, params) => {\r\n        if (!value) {\r\n            return true;\r\n        }\r\n\r\n        let val = parseFloat(value);\r\n        if (isNaN(val)) {\r\n            return false;\r\n        }\r\n\r\n        if (params.min) {\r\n            let min = parseFloat(params.min);\r\n            if (val < min) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        if (params.max) {\r\n            let max = parseFloat(params.max);\r\n            if (val > max) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Validates whether the input value satisfies a regular expression pattern.\r\n     */\r\n    regex: ValidationProvider = (value, element, params) => {\r\n        if (!value || !params.pattern) {\r\n            return true;\r\n        }\r\n\r\n        let r = new RegExp(params.pattern);\r\n        return r.test(value);\r\n    }\r\n\r\n    /**\r\n     * Validates whether the input value is an email in accordance to RFC822 specification, with a top level domain.\r\n     */\r\n    email: ValidationProvider = (value, element, params) => {\r\n        if (!value) {\r\n            return true;\r\n        }\r\n\r\n        // RFC822 email address with .TLD validation\r\n        // (c) Richard Willis, Chris Ferdinandi, MIT Licensed\r\n        // https://gist.github.com/badsyntax/719800\r\n        // https://gist.github.com/cferdinandi/d04aad4ce064b8da3edf21e26f8944c4\r\n\r\n        let r = /^([^\\x00-\\x20\\x22\\x28\\x29\\x2c\\x2e\\x3a-\\x3c\\x3e\\x40\\x5b-\\x5d\\x7f-\\xff]+|\\x22([^\\x0d\\x22\\x5c\\x80-\\xff]|\\x5c[\\x00-\\x7f])*\\x22)(\\x2e([^\\x00-\\x20\\x22\\x28\\x29\\x2c\\x2e\\x3a-\\x3c\\x3e\\x40\\x5b-\\x5d\\x7f-\\xff]+|\\x22([^\\x0d\\x22\\x5c\\x80-\\xff]|\\x5c[\\x00-\\x7f])*\\x22))*\\x40([^\\x00-\\x20\\x22\\x28\\x29\\x2c\\x2e\\x3a-\\x3c\\x3e\\x40\\x5b-\\x5d\\x7f-\\xff]+|\\x5b([^\\x0d\\x5b-\\x5d\\x80-\\xff]|\\x5c[\\x00-\\x7f])*\\x5d)(\\x2e([^\\x00-\\x20\\x22\\x28\\x29\\x2c\\x2e\\x3a-\\x3c\\x3e\\x40\\x5b-\\x5d\\x7f-\\xff]+|\\x5b([^\\x0d\\x5b-\\x5d\\x80-\\xff]|\\x5c[\\x00-\\x7f])*\\x5d))*(\\.\\w{2,})+$/;\r\n        return r.test(value);\r\n    }\r\n\r\n    /**\r\n     * Validates whether the input value is a credit card number, with Luhn's Algorithm.\r\n     */\r\n    creditcard: ValidationProvider = (value, element, params) => {\r\n        if (!value) {\r\n            return true;\r\n        }\r\n\r\n        // (c) jquery-validation, MIT Licensed\r\n        // https://github.com/jquery-validation/jquery-validation/blob/master/src/additional/creditcard.js\r\n        // based on https://en.wikipedia.org/wiki/Luhn_algorithm\r\n\r\n        // Accept only spaces, digits and dashes\r\n        if (/[^0-9 \\-]+/.test(value)) {\r\n            return false;\r\n        }\r\n\r\n        var nCheck = 0,\r\n            nDigit = 0,\r\n            bEven = false,\r\n            n, cDigit;\r\n\r\n        value = value.replace(/\\D/g, \"\");\r\n\r\n        // Basing min and max length on https://developer.ean.com/general_info/Valid_Credit_Card_Types\r\n        if (value.length < 13 || value.length > 19) {\r\n            return false;\r\n        }\r\n\r\n        for (n = value.length - 1; n >= 0; n--) {\r\n            cDigit = value.charAt(n);\r\n            nDigit = parseInt(cDigit, 10);\r\n            if (bEven) {\r\n                if ((nDigit *= 2) > 9) {\r\n                    nDigit -= 9;\r\n                }\r\n            }\r\n\r\n            nCheck += nDigit;\r\n            bEven = !bEven;\r\n        }\r\n\r\n        return (nCheck % 10) === 0;\r\n    }\r\n\r\n    /**\r\n     * Validates whether the input value is a URL.\r\n     */\r\n    url: ValidationProvider = (value, element, params) => {\r\n        if (!value) {\r\n            return true;\r\n        }\r\n\r\n        // (c) Diego Perini, MIT Licensed\r\n        // https://gist.github.com/dperini/729294\r\n\r\n        var r = new RegExp(\r\n            \"^\" +\r\n            // protocol identifier\r\n            \"(?:(?:https?|ftp)://)\" +\r\n            // user:pass authentication\r\n            \"(?:\\\\S+(?::\\\\S*)?@)?\" +\r\n            \"(?:\" +\r\n            // IP address exclusion\r\n            // private & local networks\r\n            \"(?!(?:10|127)(?:\\\\.\\\\d{1,3}){3})\" +\r\n            \"(?!(?:169\\\\.254|192\\\\.168)(?:\\\\.\\\\d{1,3}){2})\" +\r\n            \"(?!172\\\\.(?:1[6-9]|2\\\\d|3[0-1])(?:\\\\.\\\\d{1,3}){2})\" +\r\n            // IP address dotted notation octets\r\n            // excludes loopback network 0.0.0.0\r\n            // excludes reserved space >= 224.0.0.0\r\n            // excludes network & broacast addresses\r\n            // (first & last IP address of each class)\r\n            \"(?:[1-9]\\\\d?|1\\\\d\\\\d|2[01]\\\\d|22[0-3])\" +\r\n            \"(?:\\\\.(?:1?\\\\d{1,2}|2[0-4]\\\\d|25[0-5])){2}\" +\r\n            \"(?:\\\\.(?:[1-9]\\\\d?|1\\\\d\\\\d|2[0-4]\\\\d|25[0-4]))\" +\r\n            \"|\" +\r\n            // host name\r\n            \"(?:(?:[a-z\\\\u00a1-\\\\uffff0-9]-*)*[a-z\\\\u00a1-\\\\uffff0-9]+)\" +\r\n            // domain name\r\n            \"(?:\\\\.(?:[a-z\\\\u00a1-\\\\uffff0-9]-*)*[a-z\\\\u00a1-\\\\uffff0-9]+)*\" +\r\n            // TLD identifier\r\n            \"(?:\\\\.(?:[a-z\\\\u00a1-\\\\uffff]{2,}))\" +\r\n            // TLD may end with dot\r\n            \"\\\\.?\" +\r\n            \")\" +\r\n            // port number\r\n            \"(?::\\\\d{2,5})?\" +\r\n            // resource path\r\n            \"(?:[/?#]\\\\S*)?\" +\r\n            \"$\", \"i\"\r\n        );\r\n\r\n        return r.test(value);\r\n    }\r\n\r\n    /**\r\n     * Validates whether the input value is a phone number.\r\n     */\r\n    phone: ValidationProvider = (value, element, params) => {\r\n        if (!value) {\r\n            return true;\r\n        }\r\n\r\n        // Allows whitespace or dash as number separator because some people like to do that...\r\n        let consecutiveSeparator = /[\\+\\-\\s][\\-\\s]/g;\r\n        if (consecutiveSeparator.test(value)) {\r\n            return false;\r\n        }\r\n\r\n        let r = /^\\+?[0-9\\-\\s]+$/;\r\n        return r.test(value);\r\n    }\r\n\r\n    /**\r\n     * Asynchronously validates the input value to a JSON GET API endpoint. \r\n     */\r\n    remote: ValidationProvider = (value, element, params) => {\r\n        if (!value) {\r\n            return true;\r\n        }\r\n\r\n        return new Promise((ok, reject) => {\r\n            let url = params['url'] + '?' + element.name + '=' + encodeURIComponent(value);\r\n\r\n            // params.additionalfields: *.Email,*.Username\r\n            let xtras = (params.additionalfields as string).split(',');\r\n\r\n            for (let i = 0; i < xtras.length; i++) {\r\n                let xtra = xtras[i].substr(2);\r\n                if (xtra === element.name) {\r\n                    continue;\r\n                }\r\n\r\n                let e = document.getElementById(xtra) as HTMLInputElement;\r\n                if (!e || !e.value) {\r\n                    continue;\r\n                }\r\n\r\n                url = url + '&' + e.name + '=' + encodeURIComponent(e.value);\r\n            }\r\n\r\n            var request = new XMLHttpRequest();\r\n            request.open('get', url);\r\n\r\n            request.onload = e => {\r\n                if (request.status >= 200 && request.status < 300) {\r\n                    let data = JSON.parse(request.responseText);\r\n                    ok(data);\r\n                } else {\r\n                    reject({\r\n                        status: request.status,\r\n                        statusText: request.statusText,\r\n                        data: request.responseText\r\n                    });\r\n                }\r\n            };\r\n\r\n            request.onerror = e => {\r\n                reject({\r\n                    status: request.status,\r\n                    statusText: request.statusText,\r\n                    data: request.responseText\r\n                });\r\n            };\r\n\r\n            request.send();\r\n        });\r\n    }\r\n}\r\n\r\n/**\r\n * Responsibles for managing the DOM elements and running the validation providers.\r\n */\r\nexport class ValidationService {\r\n    /**\r\n     * A key-value collection of loaded validation plugins. \r\n     */\r\n    private providers: { [name: string]: ValidationProvider } = {};\r\n\r\n    /**\r\n     * A key-value collection of <span> elements for displaying validation messages for an input (by DOM ID).\r\n     */\r\n    private messageFor: { [id: string]: Element[] } = {};\r\n\r\n    /**\r\n     * A list of managed elements, each having a randomly assigned unique identifier (UID).\r\n     */\r\n    private elementUIDs: ElementUID[] = [];\r\n\r\n    /**\r\n     * A key-value collection of UID to Element for quick lookup. \r\n     */\r\n    private elementByUID: { [uid: string]: Element } = {};\r\n\r\n    /**\r\n     * A key-value collection of input UIDs for a <form> UID.\r\n     */\r\n    private formInputs: { [formUID: string]: string[] } = {};\r\n\r\n    /**\r\n     * A key-value map for input UID to its validator factory.\r\n     */\r\n    private validators: { [inputUID: string]: Validator } = {};\r\n\r\n    /**\r\n     * A key-value map for element UID to its trigger element (submit event for <form>, input event for <textarea> and <input>).\r\n     */\r\n    private elementEvents: { [id: string]: (Event) => any } = {};\r\n\r\n    /**\r\n     * A key-value map of input UID to its validation error message.\r\n     */\r\n    private summary: StringKeyValuePair = {};\r\n\r\n    /**\r\n     * A serialized representation of the validation error message summary rendered to the user.\r\n     */\r\n    private renderedSummaryJSON: string;\r\n\r\n    /**\r\n     * In milliseconds, the rate of fire of the input validation.\r\n     */\r\n    debounce = 300;\r\n\r\n    /**\r\n     * Registers a new validation plugin of the given name, if not registered yet.\r\n     * Registered plugin validates inputs with data-val-[name] attribute, used as error message.\r\n     * @param name \r\n     * @param callback \r\n     */\r\n    addProvider(name: string, callback: ValidationProvider) {\r\n        if (this.providers[name]) {\r\n            // First-Come-First-Serve validation plugin design.\r\n            // Allows developers to override the default MVC Providers by adding custom providers BEFORE bootstrap() is called!\r\n            return;\r\n        }\r\n        this.providers[name] = callback;\r\n    }\r\n\r\n    /**\r\n     * Registers the default providers for enabling ASP.NET Core MVC client-side validation. \r\n     */\r\n    private addMvcProviders() {\r\n        let mvc = new MvcValidationProviders();\r\n\r\n        // [Required]\r\n        this.addProvider('required', mvc.required);\r\n        // [StringLength], [MinLength], [MaxLength]\r\n        this.addProvider('length', mvc.stringLength);\r\n        this.addProvider('maxlength', mvc.stringLength);\r\n        this.addProvider('minlength', mvc.stringLength);\r\n        // [Compare]\r\n        this.addProvider('equalto', mvc.compare);\r\n        // [Range]\r\n        this.addProvider('range', mvc.range);\r\n        // [RegularExpression]\r\n        this.addProvider('regex', mvc.regex);\r\n        // [CreditCard]\r\n        this.addProvider('creditcard', mvc.creditcard);\r\n        // [EmailAddress]\r\n        this.addProvider('email', mvc.email);\r\n        // [Url]\r\n        this.addProvider('url', mvc.url);\r\n        // [Phone]\r\n        this.addProvider('phone', mvc.phone);\r\n        // [Remote]\r\n        this.addProvider('remote', mvc.remote);\r\n    }\r\n\r\n    /**\r\n     * Scans document for all validation message <span> generated by ASP.NET Core MVC, then tracks them.\r\n     */\r\n    private scanMessages() {\r\n        let validationMessageElements = document.querySelectorAll('[data-valmsg-for]');\r\n\r\n        for (let i = 0; i < validationMessageElements.length; i++) {\r\n            let e = validationMessageElements[i];\r\n            let name = e.getAttribute('data-valmsg-for');\r\n\r\n            if (!this.messageFor[name]) {\r\n                this.messageFor[name] = [];\r\n            }\r\n\r\n            this.messageFor[name].push(e);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Given attribute map for an HTML input, returns the validation directives to be executed. \r\n     * @param attributes \r\n     */\r\n    parseDirectives(attributes: NamedNodeMap) {\r\n        let directives: ValidationDirective = {};\r\n        let validationAtributes: StringKeyValuePair = {};\r\n\r\n        let cut = 'data-val-'.length;\r\n        for (let i = 0; i < attributes.length; i++) {\r\n            let a = attributes[i];\r\n            if (a.name.indexOf('data-val-') === 0) {\r\n                let key = a.name.substr(cut);\r\n                validationAtributes[key] = a.value;\r\n            }\r\n        }\r\n\r\n        for (let key in validationAtributes) {\r\n            if (key.indexOf('-') === -1) {\r\n                let parameters = Object.keys(validationAtributes).filter(Q => {\r\n                    return (Q !== key) && (Q.indexOf(key) === 0);\r\n                });\r\n\r\n                let directive: ValidationDirectiveBindings = {\r\n                    error: validationAtributes[key],\r\n                    params: {}\r\n                };\r\n\r\n                let pcut = (key + '-').length;\r\n                for (let i = 0; i < parameters.length; i++) {\r\n                    let pvalue = validationAtributes[parameters[i]];\r\n                    let pkey = parameters[i].substr(pcut);\r\n\r\n                    directive.params[pkey] = pvalue;\r\n                }\r\n\r\n                directives[key] = directive;\r\n            }\r\n        }\r\n\r\n        // console.log(directives);\r\n        return directives;\r\n    }\r\n\r\n    /**\r\n     *  Returns an RFC4122 version 4 compliant GUID.\r\n     */\r\n    private guid4() {\r\n        // (c) broofa, MIT Licensed\r\n        // https://stackoverflow.com/questions/105034/create-guid-uuid-in-javascript/2117523#2117523\r\n\r\n        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\r\n            var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);\r\n            return v.toString(16);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Gets a UID for an DOM element.\r\n     * @param node \r\n     */\r\n    private getElementUID(node: Element) {\r\n        let x = this.elementUIDs.filter(e => {\r\n            return e.node === node;\r\n        })[0];\r\n\r\n        if (x) {\r\n            return x.uid;\r\n        }\r\n\r\n        let uid = this.guid4();\r\n        this.elementUIDs.push({\r\n            node: node,\r\n            uid: uid\r\n        });\r\n        this.elementByUID[uid] = node;\r\n        return uid;\r\n    }\r\n\r\n    /**\r\n     * Returns a Promise that returns validation result for each and every inputs within the form.\r\n     * @param formUID \r\n     */\r\n    private getFormValidationTask(formUID: string) {\r\n        let formInputUIDs = this.formInputs[formUID];\r\n        if (!formInputUIDs || formInputUIDs.length === 0) {\r\n            return null;\r\n        }\r\n\r\n        let formValidators: Validator[] = [];\r\n\r\n        for (let i = 0; i < formInputUIDs.length; i++) {\r\n            let inputUID = formInputUIDs[i];\r\n            formValidators.push(this.validators[inputUID]);\r\n        }\r\n\r\n        let tasks = formValidators.map(factory => factory());\r\n        return Promise.all(tasks).then(result => result.every(e => e));\r\n    }\r\n\r\n    /**\r\n     * Tracks a <form> element as parent of an input UID. When the form is submitted, attempts to validate the said input asynchronously.\r\n     * @param form \r\n     * @param inputUID \r\n     */\r\n    private trackFormInput(form: HTMLFormElement, inputUID: string) {\r\n        let formUID = this.getElementUID(form);\r\n        if (!this.formInputs[formUID]) {\r\n            this.formInputs[formUID] = [];\r\n        }\r\n        let add = (this.formInputs[formUID].indexOf(inputUID) === -1);\r\n        if (add) {\r\n            this.formInputs[formUID].push(inputUID);\r\n        }\r\n\r\n        if (this.elementEvents[formUID]) {\r\n            return;\r\n        }\r\n\r\n        let cb = e => {\r\n            let validate = this.getFormValidationTask(formUID);\r\n            if (!validate) {\r\n                return;\r\n            }\r\n\r\n            e.preventDefault();\r\n            validate.then(success => {\r\n                if (success) {\r\n                    form.submit();\r\n                }\r\n            }).catch(error => {\r\n                console.log(error);\r\n            });\r\n        };\r\n\r\n        form.addEventListener('submit', cb);\r\n        form.addEventListener('reset', e => {\r\n            let uids = this.formInputs[formUID];\r\n\r\n            for (let uid of uids) {\r\n                let input = this.elementByUID[uid] as HTMLInputElement;\r\n                input.classList.remove('input-validation-error');\r\n                input.classList.remove('input-validation-valid');\r\n\r\n                let spans = this.messageFor[input.name];\r\n                if (spans) {\r\n                    for (let i = 0; i < spans.length; i++) {\r\n                        spans[i].innerHTML = '';\r\n                    }\r\n                }\r\n\r\n                delete this.summary[uid];\r\n            }\r\n            this.renderSummary();\r\n        });\r\n        this.elementEvents[formUID] = cb;\r\n    }\r\n\r\n    /**\r\n     * Adds an input element to be managed and validated by the service.\r\n     * Triggers a debounced live validation when input value changes.\r\n     * @param input \r\n     */\r\n    addInput(input: HTMLInputElement) {\r\n        let uid = this.getElementUID(input);\r\n\r\n        let directives = this.parseDirectives(input.attributes);\r\n        let validate = this.createValidator(input, directives);\r\n\r\n        this.validators[uid] = validate;\r\n        this.trackFormInput(input.form, uid);\r\n\r\n        if (this.elementEvents[uid]) {\r\n            return;\r\n        }\r\n\r\n        let delay;\r\n        let cb = e => {\r\n            let validate = this.validators[uid];\r\n            clearTimeout(delay);\r\n            delay = setTimeout(validate, this.debounce);\r\n        };\r\n\r\n        let isDropdown = input.tagName.toLowerCase() === 'select';\r\n        if (isDropdown) {\r\n            input.addEventListener('change', cb);\r\n        } else {\r\n            input.addEventListener('input', cb);\r\n        }\r\n\r\n        this.elementEvents[uid] = cb;\r\n    }\r\n\r\n    /**\r\n     * Scans the entire document for input elements to be validated.\r\n     */\r\n    private scanInputs() {\r\n        let inputs = document.querySelectorAll('[data-val=\"true\"]');\r\n\r\n        for (let i = 0; i < inputs.length; i++) {\r\n            let input = inputs[i] as HTMLInputElement;\r\n            this.addInput(input);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns a <ul> element as a validation errors summary.\r\n     */\r\n    createSummaryDOM() {\r\n        if (!Object.keys(this.summary).length) {\r\n            return null;\r\n        }\r\n\r\n        let ul = document.createElement('ul');\r\n        for (let key in this.summary) {\r\n            let li = document.createElement('li');\r\n            li.innerHTML = this.summary[key];\r\n            ul.appendChild(li);\r\n        }\r\n        return ul;\r\n    }\r\n\r\n    /**\r\n     * Displays validation summary to ASP.NET Core MVC designated elements, when it actually gets updated.\r\n     */\r\n    private renderSummary() {\r\n        let summaryElements = document.querySelectorAll('[data-valmsg-summary=\"true\"]');\r\n        if (!summaryElements.length) {\r\n            return;\r\n        }\r\n\r\n        // Using JSON.stringify for quick and painless deep compare of simple KVP. You need to sort the keys first, tho...\r\n        let shadow = JSON.stringify(this.summary, Object.keys(this.summary).sort());\r\n        if (shadow === this.renderedSummaryJSON) {\r\n            return;\r\n        }\r\n\r\n        // Prevents wasteful re-rendering of summary list element with identical items!\r\n        // console.log('RENDERING VALIDATION SUMMARY');\r\n        this.renderedSummaryJSON = shadow;\r\n        let ul = this.createSummaryDOM();\r\n\r\n        for (let i = 0; i < summaryElements.length; i++) {\r\n            let e = summaryElements[i];\r\n            e.innerHTML = '';\r\n            if (ul) {\r\n                e.className = 'validation-summary-error';\r\n                e.appendChild(ul.cloneNode(true));\r\n            } else {\r\n                e.className = 'validation-summary-valid';\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Adds an error message to an input element, which also updates the validation message elements and validation summary elements.\r\n     * @param input \r\n     * @param message \r\n     */\r\n    addError(input: HTMLInputElement, message: string) {\r\n        let spans = this.messageFor[input.name];\r\n        if (spans) {\r\n            for (let i = 0; i < spans.length; i++) {\r\n                spans[i].innerHTML = message;\r\n                spans[i].className = 'field-validation-error';\r\n            }\r\n        }\r\n\r\n        input.classList.remove('input-validation-valid');\r\n        input.classList.add('input-validation-error');\r\n\r\n        let uid = this.getElementUID(input);\r\n        this.summary[uid] = message;\r\n        this.renderSummary();\r\n    }\r\n\r\n    /**\r\n     * Removes an error message from an input element, which also updates the validation message elements and validation summary elements.\r\n     * @param input \r\n     */\r\n    removeError(input: HTMLInputElement) {\r\n        let spans = this.messageFor[input.name];\r\n        if (spans) {\r\n            for (let i = 0; i < spans.length; i++) {\r\n                spans[i].innerHTML = '';\r\n                spans[i].className = 'field-validation-valid';\r\n            }\r\n        }\r\n\r\n        input.classList.remove('input-validation-error');\r\n        input.classList.add('input-validation-valid');\r\n\r\n        let uid = this.getElementUID(input);\r\n        delete this.summary[uid];\r\n        this.renderSummary();\r\n    }\r\n\r\n    /**\r\n     * Returns a validation Promise factory for an input element, using given validation directives.  \r\n     * @param input \r\n     * @param directives \r\n     */\r\n    createValidator(input: HTMLInputElement, directives: ValidationDirective) {\r\n        return async () => {\r\n            for (let key in directives) {\r\n                let directive = directives[key];\r\n                let provider = this.providers[key];\r\n\r\n                if (!provider) {\r\n                    console.log('aspnet-validation provider not implemented: ' + key);\r\n                    continue;\r\n                }\r\n\r\n                let result = provider(input.value, input, directive.params);\r\n                let valid = false;\r\n                let error = directive.error;\r\n\r\n                if (typeof result === 'boolean') {\r\n                    valid = result;\r\n                } else if (typeof result === 'string') {\r\n                    valid = false;\r\n                    error = result;\r\n                } else {\r\n                    let resolution = await result;\r\n                    if (typeof resolution === 'boolean') {\r\n                        valid = resolution;\r\n                    } else {\r\n                        valid = false;\r\n                        error = resolution;\r\n                    }\r\n                }\r\n\r\n                if (!valid) {\r\n                    this.addError(input, error);\r\n                    return false;\r\n                }\r\n            }\r\n\r\n            this.removeError(input);\r\n            return true;\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Load default validation providers and scans the entire document when ready.\r\n     */\r\n    bootstrap() {\r\n        this.addMvcProviders();\r\n\r\n        document.addEventListener('DOMContentLoaded', event => {\r\n            this.scanMessages();\r\n            this.scanInputs();\r\n        });\r\n    }\r\n}\r\n"],"sourceRoot":""}